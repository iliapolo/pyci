<?xml version="1.0" encoding="utf-8"?><testsuite errors="14" failures="2" name="pytest" skipped="2" tests="267" time="2494.747"><testcase classname="pyci.tests.api.test_ci" file="pyci/tests/api/test_ci.py" line="29" name="test_detect[env0-CircleCI-iliapolo/pyci-master-33526a9e0445541d96e027db2aeb93d07cdf8bd6-0.0.1-None-build-url]" time="0.534"></testcase><testcase classname="pyci.tests.api.test_ci" file="pyci/tests/api/test_ci.py" line="29" name="test_detect[env1-CircleCI-None-None-None-None-None-None]" time="0.004"></testcase><testcase classname="pyci.tests.api.test_ci" file="pyci/tests/api/test_ci.py" line="29" name="test_detect[env2-Travis-CI-iliapolo/pyci-master-33526a9e0445541d96e027db2aeb93d07cdf8bd6-0.0.1-5-https://travis-ci.org/iliapolo/pyci/builds/40]" time="0.004"></testcase><testcase classname="pyci.tests.api.test_ci" file="pyci/tests/api/test_ci.py" line="29" name="test_detect[env3-Travis-CI-None-None-None-None-None-None]" time="0.005"></testcase><testcase classname="pyci.tests.api.test_ci" file="pyci/tests/api/test_ci.py" line="29" name="test_detect[env4-AppVeyor-iliapolo/pyci-master-33526a9e0445541d96e027db2aeb93d07cdf8bd6-0.0.1-5-https://ci.appveyor.com/project/iliapolo/pyci/build/1.0.0]" time="0.004"></testcase><testcase classname="pyci.tests.api.test_ci" file="pyci/tests/api/test_ci.py" line="29" name="test_detect[env5-AppVeyor-None-None-None-None-None-None]" time="0.005"></testcase><testcase classname="pyci.tests.api.test_ci" file="pyci/tests/api/test_ci.py" line="166" name="test_validate_build_pull_request" time="0.004"></testcase><testcase classname="pyci.tests.api.test_ci" file="pyci/tests/api/test_ci.py" line="177" name="test_validate_build_tag" time="0.003"></testcase><testcase classname="pyci.tests.api.test_ci" file="pyci/tests/api/test_ci.py" line="189" name="test_validate_build_branch" time="0.003"></testcase><testcase classname="pyci.tests.api.test_ci" file="pyci/tests/api/test_ci.py" line="202" name="test_validate_build" time="0.003"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="40" name="test_no_repo" time="0.003"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="46" name="test_no_access_token" time="0.003"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="52" name="test_non_existing_repo" time="0.524"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="59" name="test_default_branch_name" time="0.006"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="68" name="test_validate_commit_commit_not_related_to_issue" time="0.587"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="74" name="test_validate_commit_issue_is_not_labeled_as_release" time="2.188"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="80" name="test_validate_commit_via_issue[f7a59debfce6c2242eea5078fa0007b004ce3a57]" time="2.870"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="80" name="test_validate_commit_via_issue[5b0aa87aac95cc24d24684f30daab44d2cc61d5d]" time="2.650"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="80" name="test_validate_commit_via_issue[ee1e10067bda8200cc17ae7901c2d3f0fa0c7333]" time="2.812"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="90" name="test_validate_commit_via_pull_request" time="3.105"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="96" name="test_generate_changelog_relative_to_release" time="64.988"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="136" name="test_generate_changelog_with_commit_linked_to_non_existing_issue" time="30.131"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="152" name="test_generate_changelog_relative_to_commit" time="2.318"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="172" name="test_generate_changelog_no_release" time="12.033"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="203" name="test_upload_changelog_no_changelog" time="0.005"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="209" name="test_upload_changelog_no_release" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="215" name="test_upload_changelog_non_existing_release" time="0.545"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="221" name="test_upload_changelog" time="25.301"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="251" name="test_generate_changelog_empty" time="27.594"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="266" name="test_delete_release_no_name" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="272" name="test_delete_release" time="25.023"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="285" name="test_delete_non_existing_release" time="0.527"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="291" name="test_delete_tag_no_name" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="297" name="test_delete_tag" time="24.496"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="309" name="test_delete_non_existing_tag" time="0.521"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="315" name="test_upload_asset_no_asset" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="321" name="test_upload_asset_no_release" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="327" name="test_upload_asset_non_existing_release" time="0.604"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="338" name="test_upload_asset" time="26.997"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="358" name="test_upload_asset_already_exists" time="216.945"><error message="test teardown failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, request = &lt;SubRequest &apos;cleanup&apos; for &lt;Function test_upload_asset_already_exists&gt;&gt;, repo = Repository(full_name=&quot;iliapolo/pyci-guinea-pig&quot;)
test_name = &apos;pyci.tests.api.test_gh.py.test_upload_asset_already_exists&apos;

    @pytest.fixture(name=&apos;cleanup&apos;, autouse=True)
    def _cleanup(log, request, repo, test_name):
        with _github_cleanup(log, test_name, request, repo):
&gt;           yield

pyci/tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/contextlib.py:24: in __exit__
    self.gen.next()
pyci/tests/conftest.py:363: in _github_cleanup
    _reset_repo(log, repo)
pyci/tests/conftest.py:400: in _reset_repo
    _reset_issues(log, repo)
pyci/tests/conftest.py:419: in _reset_issues
    for comment in issue.get_comments():
../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/github/PaginatedList.py:58: in __iter__
    newElements = self._grow()
../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/github/PaginatedList.py:70: in _grow
    newElements = self._fetchNextPage()
../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/github/PaginatedList.py:172: in _fetchNextPage
    headers=self.__headers
../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/github/Requester.py:260: in requestJsonAndCheck
    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))
../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/github/Requester.py:317: in requestJson
    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)
../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/github/Requester.py:370: in __requestEncode
    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)
../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/github/Requester.py:394: in __requestRaw
    response = cnx.getresponse()
pyci/tests/github_patcher.py:77: in getresponse
    res = self._cnx.getresponse()
../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/github/Requester.py:107: in getresponse
    r = verb(url, headers=self.headers, data=self.input, timeout=self.timeout, verify=self.verify)
../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/requests/sessions.py:546: in get
    return self.request(&apos;GET&apos;, url, **kwargs)
../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/requests/sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/requests/sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;requests.adapters.HTTPAdapter object at 0x1113efbd0&gt;, request = &lt;PreparedRequest [GET]&gt;, stream = False, timeout = &lt;urllib3.util.timeout.Timeout object at 0x1113efe90&gt;, verify = True, cert = None
proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
            raise ConnectionError(e, request=request)
    
        except ClosedPoolError as e:
            raise ConnectionError(e, request=request)
    
        except _ProxyError as e:
            raise ProxyError(e)
    
        except (_SSLError, _HTTPError) as e:
            if isinstance(e, _SSLError):
                # This branch is for urllib3 versions earlier than v1.22
                raise SSLError(e, request=request)
            elif isinstance(e, ReadTimeoutError):
&gt;               raise ReadTimeout(e, request=request)
E               ReadTimeout: HTTPSConnectionPool(host=&apos;api.github.com&apos;, port=443): Read timed out. (read timeout=30)

../../../../virtualenvs/pyci@iliapolo@github.com/lib/python2.7/site-packages/requests/adapters.py:529: ReadTimeout</error></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="372" name="test_bump_version[patch-0.0.2]" time="27.978"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="372" name="test_bump_version[minor-0.1.0]" time="29.017"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="372" name="test_bump_version[major-1.0.0]" time="29.166"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="394" name="test_bump_version_no_semantic" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="400" name="test_bump_version_semantic_illegal" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="406" name="test_set_version" time="29.226"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="425" name="test_set_version_same_version" time="21.214"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="432" name="test_get_release_no_release" time="0.005"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="438" name="test_get_release" time="24.937"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="448" name="test_get_release_doesnt_exist" time="0.598"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="454" name="test_close_issue_no_num" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="460" name="test_close_issue_no_release" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="466" name="test_close_issue_issue_doesnt_exist" time="23.686"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="475" name="test_close_issue_release_doesnt_exist" time="1.181"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="481" name="test_close_issue" time="34.882"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="500" name="test_detect_issue_direct" time="2.990"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="513" name="test_detect_issue_via_pr" time="3.673"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="526" name="test_detect_issue_not_exists" time="1.010"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="532" name="test_detect_issue_does_not_exist_via_pr" time="1.124"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="538" name="test_detect_issue_no_issue" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="545" name="test_detect_issue_no_sha_no_commit_message" time="0.003"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="551" name="test_detect_issue_sha_and_commit_message" time="0.003"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="557" name="test_create_release_non_existing_commit" time="0.848"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="563" name="test_create_release_not_python_project" time="1.116"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="570" name="test_create_release" time="24.911"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="594" name="test_create_release_already_exists" time="24.978"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="604" name="test_set_version_no_value" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="610" name="test_set_version_not_semantic" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="616" name="test_reset_branch_no_name" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="622" name="test_reset_branch_no_sha" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="628" name="test_reset_branch_non_existing_branch" time="0.637"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="634" name="test_reset_branch_non_existing_sha" time="1.034"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="640" name="test_reset_branch" time="25.305"><failure message="AssertionError: assert &apos;4e0d4ff1dee5...367af64d6aca3&apos; == &apos;cf2d64132f00c...e32b719b6cbac&apos;
  - 4e0d4ff1dee5c287fe75b660cbb367af64d6aca3
  + cf2d64132f00c849ae1bb62ffb2e32b719b6cbac">gh = &lt;pyci.api.gh.GitHubRepository object at 0x1116b1290&gt;

    @pytest.mark.wet
    def test_reset_branch(gh):
    
        # pylint: disable=protected-access
        commit = gh._create_commit(sha=&apos;release&apos;,
                                   path=&apos;README.md&apos;,
                                   contents=&apos;hello&apos;,
                                   message=&apos;message&apos;)
    
        gh.reset_branch(name=&apos;release&apos;, sha=commit.sha)
    
        actual_sha = gh.repo.get_branch(branch=&apos;release&apos;).commit.sha
    
&gt;       assert commit.sha == actual_sha
E       AssertionError: assert &apos;4e0d4ff1dee5...367af64d6aca3&apos; == &apos;cf2d64132f00c...e32b719b6cbac&apos;
E         - 4e0d4ff1dee5c287fe75b660cbb367af64d6aca3
E         + cf2d64132f00c849ae1bb62ffb2e32b719b6cbac

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/api/test_gh.py:654: AssertionError</failure></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="656" name="test_reset_branch_already_at_sha" time="20.286"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="663" name="test_reset_branch_hard" time="24.068"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="679" name="test_reset_branch_not_fast_forward" time="20.968"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="690" name="test_reset_branch_not_fast_forward_hard" time="23.531"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="702" name="test_create_branch_no_name" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="708" name="test_create_branch_no_sha" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="714" name="test_create_branch_sha_doesnt_exist" time="0.566"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="720" name="test_create_branch" time="23.401"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="731" name="test_create_branch_already_exists" time="0.889"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="738" name="test_delete_branch_no_name" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="744" name="test_delete_branch_doesnt_exist" time="1.041"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="750" name="test_delete_branch" time="23.703"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="763" name="test_commit_no_path" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="769" name="test_commit_no_contents" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="775" name="test_commit_no_message" time="0.004"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="781" name="test_commit_branch_doesnt_exist" time="19.287"></testcase><testcase classname="pyci.tests.api.test_gh" file="pyci/tests/api/test_gh.py" line="792" name="test_commit_file" time="25.095"></testcase><testcase classname="pyci.tests.api.test_logger" file="pyci/tests/api/test_logger.py" line="23" name="test_no_name" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelogIssue" file="pyci/tests/api/test_model.py" line="25" name="test_no_title" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelogIssue" file="pyci/tests/api/test_model.py" line="30" name="test_no_url" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelogIssue" file="pyci/tests/api/test_model.py" line="35" name="test_no_timestamp" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelogCommit" file="pyci/tests/api/test_model.py" line="43" name="test_no_title" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelogCommit" file="pyci/tests/api/test_model.py" line="48" name="test_no_url" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelogCommit" file="pyci/tests/api/test_model.py" line="53" name="test_no_timestamp" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="62" name="test_no_sha" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="68" name="test_no_current_version" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="74" name="test_current_version_not_semantic" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="80" name="test_empty" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="87" name="test_add_invalid_type" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="94" name="test_add_feature" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="115" name="test_add_bug" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="136" name="test_add_issue" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="157" name="test_add_commit" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="177" name="test_not_empty_features" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="191" name="test_not_empty_bugs" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="205" name="test_not_empty_issues" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="219" name="test_not_empty_commits" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="232" name="test_add_identical_features" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="254" name="test_add_identical_bugs" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="276" name="test_add_identical_issues" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="298" name="test_add_identical_commits" time="0.003"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="318" name="test_next_version" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="346" name="test_next_version_none" time="0.004"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="360" name="test_render_only_issues" time="0.011"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="392" name="test_render_only_bugs" time="0.010"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="424" name="test_render_only_features" time="0.011"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="456" name="test_render_only_commits" time="0.012"></testcase><testcase classname="pyci.tests.api.test_model.TestChangelog" file="pyci/tests/api/test_model.py" line="487" name="test_render_all" time="0.011"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="28" name="test_sha_and_not_repo" time="0.003"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="34" name="test_sha_and_path" time="0.003"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="40" name="test_repo_and_path" time="0.003"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="46" name="test_not_sha_and_not_path" time="0.003"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="52" name="test_path_doesnt_exist" time="0.003"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="58" name="test_target_dir_doesnt_exist" time="0.371"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="65" name="test_default_target_dir" time="0.160"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="72" name="test_set_target_dir_doesnt_exist" time="0.173"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="78" name="test_repo_dir_sha" time="3.359"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="87" name="test_sha_doesnt_exist" time="1.263"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="93" name="test_wheel" time="16.786"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="102" name="test_wheel_not_python_project" time="0.168"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="110" name="test_wheel_options" time="20.059"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="121" name="test_wheel_file_exists" time="16.683"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="135" name="test_binary" time="40.278"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="148" name="test_binary_options" time="30.086"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="178" name="test_binary_only_requirements_txt" time="24.119"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="190" name="test_binary_no_requirements" time="27.222"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="204" name="test_binary_file_exists" time="0.762"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="219" name="test_binary_default_entrypoint_doesnt_exist" time="0.793"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="228" name="test_binary_entrypoint_doesnt_exist" time="0.552"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="234" name="test_exei_no_binary_path" time="0.336"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="242" name="test_exei_binary_path_doesnt_exist" time="0.366"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="250" name="test_exei_invalid_version_string" time="0.414"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="263" name="test_exei_license_not_found" time="0.162"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="276" name="test_exei_destination_exists" time="0.338"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="297" name="test_exei_target_directory_doesnt_exists" time="0.335"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="315" name="test_exei_on_linux" time="0.344"></testcase><testcase classname="pyci.tests.api.test_packager" file="pyci/tests/api/test_packager.py" line="322" name="test_exei" time="0.003"><skipped message="[(&apos;pyci/tests/api/test_packager.py&apos;, 322, &apos;test_exei&apos;)] This test should not run on windows" type="pytest.skip">/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:53: [(&apos;pyci/tests/api/test_packager.py&apos;, 322, &apos;test_exei&apos;)] This test should not run on windows</skipped></testcase><testcase classname="pyci.tests.api.test_pypi" file="pyci/tests/api/test_pypi.py" line="34" name="test_upload" time="0.234"></testcase><testcase classname="pyci.tests.api.test_pypi" file="pyci/tests/api/test_pypi.py" line="49" name="test_upload_already_exists" time="0.164"></testcase><testcase classname="pyci.tests.api.test_pypi" file="pyci/tests/api/test_pypi.py" line="61" name="test_upload_twine_execution_failed" time="0.368"></testcase><testcase classname="pyci.tests.api.test_pypi" file="pyci/tests/api/test_pypi.py" line="78" name="test_no_username" time="0.003"></testcase><testcase classname="pyci.tests.api.test_pypi" file="pyci/tests/api/test_pypi.py" line="84" name="test_no_password" time="0.003"></testcase><testcase classname="pyci.tests.api.test_pypi" file="pyci/tests/api/test_pypi.py" line="90" name="test_repository_url_and_test" time="0.003"></testcase><testcase classname="pyci.tests.api.test_runner" file="pyci/tests/api/test_runner.py" line="24" name="test_run_list" time="0.017"></testcase><testcase classname="pyci.tests.api.test_runner" file="pyci/tests/api/test_runner.py" line="35" name="test_run_failed_exit_on_failure" time="0.012"></testcase><testcase classname="pyci.tests.api.test_runner" file="pyci/tests/api/test_runner.py" line="42" name="test_run_failed_not_exit_on_failure" time="0.016"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="29" name="test_generate_setup_py[setup.py.0.1-2.0.1-setup.py.0.1.expected]" time="0.007"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="29" name="test_generate_setup_py[setup.py.corrupted-2.0.1-None]" time="0.006"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="47" name="test_validate_directory_exists" time="0.004"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="58" name="test_validate_file_exists" time="0.004"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="69" name="test_validate_file_does_not_exist" time="0.004"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="80" name="test_extract_version_from_setup_py_double_quotes" time="0.005"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="94" name="test_extract_version_from_setup_py_single_quotes" time="0.003"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="108" name="test_extract_version_from_setup_py_no_match" time="0.004"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="119" name="test_get_python_executable" time="0.004"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="126" name="test_get_python_executable_from_pyinstaller" time="0.004"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="137" name="test_get_python_executable_from_pyinstaller_with_exec_host" time="0.004"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="147" name="test_which_python" time="0.004"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="154" name="test_which_ls" time="0.004"></testcase><testcase classname="pyci.tests.api.test_utils" file="pyci/tests/api/test_utils.py" line="162" name="test_which_non_existent" time="0.005"></testcase><testcase classname="pyci.tests.shell.test_init" file="pyci/tests/shell/test_init.py" line="23" name="test_handle_unexpected_exception" time="0.005"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="20" name="test_pack_sha_and_path[False]" time="0.007"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="20" name="test_pack_sha_and_path[True]" time="0.531"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="32" name="test_pack_repo_no_sha[False]" time="0.006"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="32" name="test_pack_repo_no_sha[True]" time="0.515"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="42" name="test_pack_repo_sha_path[False]" time="0.006"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="42" name="test_pack_repo_sha_path[True]" time="0.808"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="54" name="test_pack_no_repo[False]" time="0.007"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="54" name="test_pack_no_repo[True]" time="0.614"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="64" name="test_pack_target_dir_doesnt_exist[False]" time="0.007"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="64" name="test_pack_target_dir_doesnt_exist[True]" time="0.750"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="76" name="test_pack_sha_doesnt_exist[False]" time="1.305"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="76" name="test_pack_sha_doesnt_exist[True]" time="1.944"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="88" name="test_github_no_repo[False]" time="0.011"></testcase><testcase classname="pyci.tests.shell.test_main" file="pyci/tests/shell/test_main.py" line="88" name="test_github_no_repo[True]" time="0.750"></testcase><testcase classname="pyci.tests.shell.test_secrets" file="pyci/tests/shell/test_secrets.py" line="43" name="test_github_access_token" time="0.005"></testcase><testcase classname="pyci.tests.shell.test_secrets" file="pyci/tests/shell/test_secrets.py" line="53" name="test_github_access_token_none" time="0.004"></testcase><testcase classname="pyci.tests.shell.test_secrets" file="pyci/tests/shell/test_secrets.py" line="60" name="test_twine_username" time="0.005"></testcase><testcase classname="pyci.tests.shell.test_secrets" file="pyci/tests/shell/test_secrets.py" line="70" name="test_twine_username_none" time="0.015"></testcase><testcase classname="pyci.tests.shell.test_secrets" file="pyci/tests/shell/test_secrets.py" line="77" name="test_twine_password" time="0.004"></testcase><testcase classname="pyci.tests.shell.test_secrets" file="pyci/tests/shell/test_secrets.py" line="87" name="test_twine_password_none" time="0.003"></testcase><testcase classname="pyci.tests.shell.commands.test_release" file="pyci/tests/shell/commands/test_release.py" line="24" name="test_release" time="96.669"></testcase><testcase classname="pyci.tests.shell.commands.test_release" file="pyci/tests/shell/commands/test_release.py" line="86" name="test_release_no_wheel_publish" time="94.574"><failure message="AssertionError: assert &apos;pyci-guinea-pig.binary&apos; in [&apos;pyci-guinea-pig.whl&apos;]">release = &lt;pyci.tests.conftest.ReleaseCommand object at 0x11350a150&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpYkO9K9test_release_no_wheel_publish&apos;
mocker = &lt;pytest_mock.MockFixture object at 0x113024310&gt;

    @pytest.mark.wet
    def test_release_no_wheel_publish(release, temp_dir, mocker):
    
        release_options = &apos;--no-wheel-publish --binary-entrypoint {}&apos;.format(
            os.path.join(&apos;pyci_guinea_pig&apos;, &apos;shell&apos;, &apos;custom_main.py&apos;))
    
        expected_binary_name = &apos;pyci-guinea-pig.binary&apos;
        expected_wheel_name = &apos;pyci-guinea-pig.whl&apos;
    
        binary_path = os.path.join(temp_dir, expected_binary_name)
        wheel_path = os.path.join(temp_dir, expected_wheel_name)
    
        # This mock has to create a file with the proper name
        # since the file is actually uploaded to the release.
        def _binary(*_, **__):
    
            with open(binary_path, &apos;w&apos;) as f:
                f.write(&apos;binary&apos;)
    
            return wheel_path
    
        # This mock can create whatever file it wants since it not
        # being uploaded anywhere, nor is it being asserted on.
        def _wheel(*_, **__):
    
            with open(wheel_path, &apos;w&apos;) as f:
                f.write(&apos;wheel&apos;)
    
            return wheel_path
    
        # This mock can return anything it wants since this URL is not being
        # asserted upon.
        def _upload(*_, **__):
            return &apos;http://this-is-an-upload-url&apos;
    
        mocker.patch(target=&apos;pyci.api.packager.Packager.binary&apos;, side_effect=_binary)
        mocker.patch(target=&apos;pyci.api.packager.Packager.wheel&apos;, side_effect=_wheel)
        mocker.patch(target=&apos;pyci.api.pypi.PyPI.upload&apos;, side_effect=_upload)
    
        release.run(&apos;--branch release {}&apos;.format(release_options))
    
        github_release = release.github.api.repo.get_release(id=&apos;1.0.0&apos;)
    
        assets = [asset.name for asset in github_release.get_assets()]
&gt;       assert expected_binary_name in assets
E       AssertionError: assert &apos;pyci-guinea-pig.binary&apos; in [&apos;pyci-guinea-pig.whl&apos;]

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/shell/commands/test_release.py:131: AssertionError</failure></testcase><testcase classname="pyci.tests.shell.commands.test_release" file="pyci/tests/shell/commands/test_release.py" line="139" name="test_release_twice" time="129.709"></testcase><testcase classname="pyci.tests.shell.commands.test_release" file="pyci/tests/shell/commands/test_release.py" line="190" name="test_release_default_entrypoint_not_found" time="0.000"><skipped message="Need to create a specific commit to fit this use case" type="pytest.skip">pyci/tests/shell/commands/test_release.py:190: Need to create a specific commit to fit this use case</skipped></testcase><testcase classname="pyci.tests.shell.commands.test_release" file="pyci/tests/shell/commands/test_release.py" line="211" name="test_release_validation_failed" time="21.924"></testcase><testcase classname="pyci.tests.shell.commands.test_release" file="pyci/tests/shell/commands/test_release.py" line="226" name="test_release_failed" time="1.165"></testcase><testcase classname="pyci.tests.shell.subcommands.test_ci" file="pyci/tests/shell/subcommands/test_ci.py" line="28" name="test_validate_build" time="0.008"></testcase><testcase classname="pyci.tests.shell.subcommands.test_ci" file="pyci/tests/shell/subcommands/test_ci.py" line="50" name="test_validate_build_failed" time="0.007"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="54" name="test_release" time="96.853"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="91" name="test_release_twice" time="115.544"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="106" name="test_release_force_with_changelog_base" time="81.324"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="124" name="test_release_with_version" time="86.368"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="136" name="test_release_not_fast_forward" time="39.753"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="167" name="test_release_branch_cannot_determine_next_version" time="22.938"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="181" name="test_release_validation_failed" time="22.839"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="197" name="test_validate_commit_sha" time="3.302"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="206" name="test_validate_commit" time="2.877"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="215" name="test_generate_changelog_sha" time="9.721"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="227" name="test_generate_changelog_from_base" time="8.736"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="241" name="test_generate_changelog_no_target" time="9.874"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="253" name="test_generate_changelog_failed" time="0.007"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="267" name="test_upload_changelog_failed" time="0.013"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="277" name="test_upload_changelog" time="25.740"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="299" name="test_create_release_sha" time="24.955"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="311" name="test_create_release_already_exists" time="26.573"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="324" name="test_create_release_not_python_project" time="20.319"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="342" name="test_create_release_failed" time="1.093"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="351" name="test_upload_asset" time="25.996"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="371" name="test_upload_asset_failed" time="0.006"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="380" name="test_detect_issue_no_sha_no_message" time="0.007"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="389" name="test_detect_issue_sha_and_message" time="0.006"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="398" name="test_detect_issue" time="2.044"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="407" name="test_detect_issue_not_related_to_issue" time="0.007"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="416" name="test_detect_issue_failed" time="1.588"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="425" name="test_delete_release" time="24.461"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="436" name="test_delete_release_failed" time="1.082"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="445" name="test_delete_tag" time="23.945"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="456" name="test_delete_tag_failed" time="1.349"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="465" name="test_bump_version" time="26.865"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="485" name="test_bump_version_failed" time="1.147"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="495" name="test_set_version" time="27.077"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="515" name="test_set_version_failed" time="1.408"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="524" name="test_reset_branch" time="24.246"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="543" name="test_reset_branch_already_at_sha" time="19.882"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="554" name="test_reset_branch_hard" time="25.298"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="573" name="test_reset_branch_not_fast_forward" time="21.756"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="589" name="test_reset_branch_not_fast_forward_hard" time="21.176"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="604" name="test_reset_branch_failed" time="1.380"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="613" name="test_create_branch" time="22.610"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="630" name="test_create_branch_failed" time="1.113"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="641" name="test_delete_branch" time="21.708"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="658" name="test_delete_branch_failed" time="1.113"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="667" name="test_commit_file" time="25.925"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="689" name="test_commit_file_failed" time="1.324"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="703" name="test_close_issue_issue_doesnt_exist" time="23.102"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="716" name="test_close_issue_release_doesnt_exist" time="2.244"></testcase><testcase classname="pyci.tests.shell.subcommands.test_github" file="pyci/tests/shell/subcommands/test_github.py" line="726" name="test_close_issue" time="35.450"></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="35" name="test_binary[False]" time="0.506"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpFQRCRptest_binary&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpFQRCRptest_binary/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="35" name="test_binary[True]" time="0.189"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpe3HwFYtest_binary&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpe3HwFYtest_binary/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="78" name="test_binary_file_exists[False]" time="0.268"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmplic46Atest_binary_file_exists&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmplic46Atest_binary_file_exists/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="78" name="test_binary_file_exists[True]" time="0.298"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpcSqR3qtest_binary_file_exists&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpcSqR3qtest_binary_file_exists/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="100" name="test_binary_default_entrypoint_doesnt_exist[False]" time="0.352"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpP0gK_Gtest_binary_default_entrypoint_doesnt_exist&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpP0gK_Gtest_binary_default_entrypoint_doesnt_exist/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="100" name="test_binary_default_entrypoint_doesnt_exist[True]" time="0.320"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpnrjSaktest_binary_default_entrypoint_doesnt_exist&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpnrjSaktest_binary_default_entrypoint_doesnt_exist/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="116" name="test_binary_entrypoint_doesnt_exist[False]" time="0.341"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpSmj9Ohtest_binary_entrypoint_doesnt_exist&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpSmj9Ohtest_binary_entrypoint_doesnt_exist/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="116" name="test_binary_entrypoint_doesnt_exist[True]" time="0.189"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpYyXmFotest_binary_entrypoint_doesnt_exist&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpYyXmFotest_binary_entrypoint_doesnt_exist/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="126" name="test_wheel[False]" time="0.311"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpcnmxfDtest_wheel&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpcnmxfDtest_wheel/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="126" name="test_wheel[True]" time="0.333"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpz9HHtutest_wheel&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpz9HHtutest_wheel/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="153" name="test_wheel_file_exists[False]" time="0.186"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmp_wT3uAtest_wheel_file_exists&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmp_wT3uAtest_wheel_file_exists/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="171" name="test_wheel_not_python_project[False]" time="0.288"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpLVXax1test_wheel_not_python_project&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmpLVXax1test_wheel_not_python_project/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pack" file="pyci/tests/shell/subcommands/test_pack.py" line="171" name="test_wheel_not_python_project[True]" time="0.331"><error message="test setup failure">log = &lt;logging.Logger object at 0x1112762d0&gt;, temp_dir = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmp9SMlFctest_wheel_not_python_project&apos;

    @pytest.fixture(name=&apos;repo_path&apos;)
    def _repo_path(log, temp_dir):
    
        target_repo_path = os.path.join(temp_dir, &apos;pyci&apos;)
    
        log.info(&apos;Copying source directory to {}...&apos;.format(target_repo_path))
&gt;       test_utils.copy_repo(target_repo_path)

/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/conftest.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:66: in copy_repo
    _copyfile(spec)
/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci/tests/utils.py:57: in _copyfile
    shutil.copyfile(path, os.path.join(dst, os.path.basename(path)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

src = &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;, dst = &apos;/var/folders/bf/nztm43714sj0fc5_40qgtbx00000gn/T/tmp9SMlFctest_wheel_not_python_project/pyci/pyci.spec&apos;

    def copyfile(src, dst):
        &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;
        if _samefile(src, dst):
            raise Error(&quot;`%s` and `%s` are the same file&quot; % (src, dst))
    
        for fn in [src, dst]:
            try:
                st = os.stat(fn)
            except OSError:
                # File most likely does not exist
                pass
            else:
                # XXX What about other special files? (sockets, devices...)
                if stat.S_ISFIFO(st.st_mode):
                    raise SpecialFileError(&quot;`%s` is a named pipe&quot; % fn)
    
&gt;       with open(src, &apos;rb&apos;) as fsrc:
E       IOError: [Errno 2] No such file or directory: &apos;/Users/elipolonsky/dev/src/github.com/iliapolo/pyci/pyci.spec&apos;

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py:82: IOError</error></testcase><testcase classname="pyci.tests.shell.subcommands.test_pypi" file="pyci/tests/shell/subcommands/test_pypi.py" line="32" name="test_upload" time="0.237"></testcase><testcase classname="pyci.tests.shell.subcommands.test_pypi" file="pyci/tests/shell/subcommands/test_pypi.py" line="47" name="test_upload_already_published" time="0.396"></testcase></testsuite>